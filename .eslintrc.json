{
  "env": {
    "browser": true,
    "es2021": true
  },
  "plugins": [
    "@typescript-eslint",
    "unicorn",
    "promise"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/strict",
    "plugin:unicorn/all",
    "plugin:promise/recommended",
    "next/core-web-vitals"
  ],
  "overrides": [],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": [
      "./tsconfig.json"
    ]
  },
  "rules": {
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": false,
        "allowHigherOrderFunctions": false,
        "allowDirectConstAssertionInArrowFunctions": false,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
        "allowFunctionsWithoutTypeParameters": false
      }
    ],
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "no-public"
      }
    ],
    "@typescript-eslint/method-signature-style": [
      "error",
      "property"
    ],
    "@typescript-eslint/no-confusing-void-expression": "error",
    "@typescript-eslint/no-duplicate-type-constituents": "error",
    "@typescript-eslint/no-import-type-side-effects": "error",
    "@typescript-eslint/no-redundant-type-constituents": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/non-nullable-type-assertion-style": "error",
    "@typescript-eslint/parameter-properties": [
      "error",
      {
        "allow": []
      }
    ],
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-array-sort-compare": "error",
    "@typescript-eslint/sort-type-constituents": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "curly": [
      "error",
      "all"
    ],
    "func-style": [
      "error",
      "expression",
      {
        "allowArrowFunctions": true
      }
    ],
    "no-else-return": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "Use for of instead of for in"
      },
      {
        "selector": "BinaryExpression[operator='in']",
        "message": "Use hasOwnProperty instead of in"
      },
      {
        "selector": "ThrowStatement",
        "message": "Use custom error types instead of throw"
      },
      {
        "selector": "DoWhileStatement",
        "message": "Do while loops are not allowed"
      },
      {
        "selector": "TSEnumDeclaration",
        "message": "Enums are not allowed"
      },
      {
        "selector": "MethodDefinition",
        "message": "Use arrow functions instead of function declarations"
      },
      {
        "selector": "PropertyDefinition[accessibility='private'], PropertyDefinition[accessibility='protected']",
        "message": "Use JS private #fields instead of private or protected"
      },
      {
        "selector": "ClassDeclaration[abstract=true]",
        "message": "Abstract classes are not allowed"
      }
    ],
    "no-ternary": "error",
    "no-var": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "unicorn/catch-error-name": "off",
    "unicorn/prevent-abbreviations": "off",
    "promise/prefer-await-to-then": "error",
    "promise/prefer-await-to-callbacks": "error"
  }
}